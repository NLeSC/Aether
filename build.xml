<project name="Aether" default="build" basedir=".">
    <description>
        Build file for Aether
    </description>

    <target name="build" description="Build Aether API and generic implementation" depends="clean,compile,examples,benchmarks" />

    <!-- If you change the version number, change it in IbisFactory.java as well! -->
    <property name="version-tag" value="1.0" />

    <!-- Names for generated directories. -->
    <property name="javadoc" value="doc/javadoc" />
    <property name="tmp" value="tmp" />
    <property name="dist" value="dist" />

    <property name="sources" value="${dist}/Aether-src-${version-tag}.zip" />

    <!-- location of smartsockets libraries. Defaults to included smartsockets,
         override with ant -Dsmartsockets=/location/of/smartsockets/lib -->
    <property name="smartsockets" value="lib/smartsockets" />

    <property name="build.sysclasspath" value="ignore"/>

    <!-- import environment properties -->
    <property environment="env" />

    <path id="external.jars">
        <fileset dir="lib">
            <include name="*.jar" />
        </fileset>
        <fileset dir="lib/smartsockets">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="default.classpath">
        <fileset dir="lib">
            <include name="*.jar" />
        </fileset>
        <pathelement path="tmp" />
    </path>

    <!-- Copy external libraries to lib directory -->
    <target name="copy-external">
        <mkdir dir="${dist}" />
        <!-- Smartsockets -->
        <echo message="using smartsockets from ${smartsockets}" />
        <copy todir="${dist}">
            <fileset dir="${smartsockets}" />
        </copy>
        <!-- Other -->
        <copy todir="${dist}">
            <fileset dir="lib" includes="*.jar"/>
        </copy>
    </target>

    <!-- Compile Aether -->
    <target name="compile" depends="copy-external">

 	<!-- Create the build directory structure used by util -->
        <delete dir="${tmp}" />
        <mkdir dir="${tmp}" />
        <mkdir dir="${dist}" />

        <!-- Compile the java code from src into tmp -->
        <javac srcdir="src" destdir="tmp" debug="on" classpathref="external.jars">
            <compilerarg value="-Xlint:unchecked" />
        </javac>

        <!--
            Build jar of Aether before rewriting. Otherwise a dependency of
            Aether on AetherIO is introduced. A IPL_MANIFEST property file is added
            to this jar later (see below)
        -->

        <jar destfile="${dist}/Aether-${version-tag}.jar">
            <fileset dir="tmp" includes="nl/esciencecenter/aether/*.class nl/esciencecenter/aether/registry/*.class" />
            <metainf dir="." includes="LICENSE.txt" />
        </jar>

        <!-- Run Ibisc -->
        <java classname="nl.esciencecenter.aether.compile.Ibisc" taskname="Ibisc" failonerror="true" dir="tmp" maxmemory="512m" fork="true">
            <arg line="." />
            <classpath refid="default.classpath" />
        </java>

        <!-- Create jar files. Set a checksum with version info in the manifests -->

        <!-- SUPPORT -->

        <property name="support.files" value="nl/esciencecenter/aether/support/**/*.class nl/esciencecenter/aether/management/**/*.class nl/esciencecenter/aether/registry/**/*.class nl/esciencecenter/aether/server/**/*.class nl/esciencecenter/aether/util/**/*.class" />

        <checksum totalproperty="support.checksum">
            <fileset dir="tmp" includes="${support.files}" />
        </checksum>

        <jar destfile="${dist}/AetherSupport-${version-tag}.jar">
            <fileset dir="tmp" includes="${support.files}" />
            <metainf dir="." includes="LICENSE.txt" />
            <manifest>
                <attribute name="Implementation-Version" value="${support.checksum}" />
            </manifest>
        </jar>

        <!-- IMPL -->

        <property name="implementation.files" value="nl/esciencecenter/aether/impl/*.class nl/esciencecenter/aether/impl/util/**/*.class" />

        <checksum totalproperty="implementation.checksum">
            <fileset dir="tmp" includes="${implementation.files}" />
        </checksum>

        <jar destfile="${dist}/AetherImpl-${version-tag}.jar">
            <fileset dir="tmp" includes="${implementation.files}" />
            <metainf dir="." includes="LICENSE.txt" />
            <manifest>
                <attribute name="Implementation-Version" value="${implementation.checksum}" />
            </manifest>
        </jar>

        <!-- SMARTSOCKETS -->

        <property name="smartsockets.files" value="nl/esciencecenter/aether/impl/smartsockets/**/*.class" />

        <checksum totalproperty="smartsockets.checksum">
            <fileset dir="tmp" includes="${smartsockets.files}" />
        </checksum>

        <jar destfile="${dist}/AetherSmartSockets-${version-tag}.jar">
            <fileset dir="tmp" includes="${smartsockets.files}" />
            <metainf dir="." includes="LICENSE.txt" />
            <manifest>
                <attribute name="Ibis-Starter-Class" value="nl.esciencecenter.aether.impl.smartsockets.SmartSocketsIbisStarter" />
                <attribute name="Ibis-IPL-Version" value="${version}" />
                <attribute name="Ibis-Implementation-Version" value="${smartsockets.checksum}" />
                <attribute name="Ibis-NickName" value="smartsockets" />
            </manifest>
        </jar>

        <!-- Backup manifest. Used if the jar file manifests cannot be loaded
             for some reason (e.g. on android) -->
        <echo file="tmp/nl/esciencecenter/aether/IPL_MANIFEST">
            support.version=${support.checksum}
            implementation.version=${implementation.checksum}
            implementations=smartsockets,tcp,nio,dummy,lrmc

            #smartsockets
            smartsockets.starter.class=nl.esciencecenter.aether.impl.smartsockets.SmartSocketsIbisStarter
            smartsockets.ipl.version=${version}
            smartsockets.version=${smartsockets.checksum}
        </echo>

        <!-- Add manifest property file to ipl jar -->
        <jar destfile="${dist}/Aether-${version-tag}.jar" update="true">
            <fileset dir="tmp" includes="nl/esciencecenter/aether/IPL_MANIFEST" />
        </jar>

        <delete dir="${tmp}" />
    </target>

    <!-- Clean up everything except the rewritten classlibs -->
    <target name="clean" description="Clean up (leaves rewritten classlibs)">
        <delete dir="${tmp}" />
        <delete dir="${dist}" />
        <delete dir="${javadoc}" />

        <ant dir="examples" inheritAll="false" target="clean" />
        <ant dir="benchmarks" inheritAll="false" target="clean" />
    </target>

    <target name="examples" description="Build examples">
        <ant dir="examples" inheritAll="false" target="build">
        </ant>

    </target>

    <target name="benchmarks" description="Build examples">
        <ant dir="benchmarks" inheritAll="false" target="build">
        </ant>
    </target>

    <target name="rewrite" depends="build" description="Preprocess all serializable classes of standard Java">
        <!-- Create a directory for the rewritten classes -->

        <mkdir dir="${classlibs}" />

        <!-- Then, find and extract jars.  -->
        <unjar dest="${classlibs}">
            <patternset>
                <include name="**/*.class" />
            </patternset>
            <fileset dir="${env.JAVA_HOME}/jre/lib">
                <include name="**/*.jar" />
            </fileset>
        </unjar>

        <!-- Then, rewrite.  -->
        <java classname="ibis.compile.Ibisc" taskname="Ibisc" failonerror="true" maxmemory="512m" dir="${rewritten-classlibs}" fork="true">
            <arg line="." />
            <classpath refid="default.classpath" />
        </java>
    </target>

    <target name="rewritten-clean" description="Clean up rewritten classlibs (except under sym links)">
        <!--
            If ${rewritten-classlibs} is a sym-link, we let the directory
            live on. In this case, I suppose the user knows what he is up to.
            If it isn't a symlink (which is the normal case) go ahead and
            throw away all your rewritten stuff.    RFHH
        -->
        <delete includeEmptyDirs="true">
            <fileset dir="." followsymlinks="false">
                <include name="classlibs/**" />
            </fileset>
        </delete>
    </target>

    <target name="javadoc" description="Create javadocs" depends="compile">
        <!-- Create the javadoc directory -->
        <delete dir="${javadoc}" />
        <mkdir dir="${javadoc}" />
        <javadoc destdir="${javadoc}" access="public" sourcepath="src" windowtitle="Aether Documentation" packagenames="nl.esciencecenter.aether,nl.esciencecenter.aether.server" classpathref="default.classpath" overview="src/overview.html" doctitle="Aether Documentation" bottom="Netherlands eScience Center">
	    <link href="http://download.oracle.com/javase/1.7.0/docs/api/" />
            <tag name="ibis.experimental" description="WARNING: This is an Experimental feature of the IPL. It may not function correctly, future releases of the IPL may have a revised API for this feature, or it may be removed completely. " />
        </javadoc>
    </target>

    <target name="docs" description="Create manuals">
        <ant dir="docs" inheritAll="false" />
    </target>

    <target name="ipl.zip" depends="build, javadoc, docs">
        <delete file="ipl${version-tag}.zip" />
        <delete file="${sources-zip}" />

        <zip destfile="${sources-zip}">
            <zipfileset dir="src" includes="**/*.java" prefix="${sources-filename}" />
            <zipfileset dir="." includes="LICENSE.txt" prefix="${sources-filename}" />
        </zip>

        <zip destfile="ipl${version-tag}.zip">
            <zipfileset dir="." prefix="ipl${version-tag}" includes="javadoc/**,docs/*.pdf,lib/**,notices/**,BUGS.txt,LICENSE.txt,HISTORY.txt,README.txt,sources/**,ibis.properties.example,log4j.properties,smartsockets.properties.example,examples/**,benchmarks/**" excludes="examples/.*,examples/.*/**" />
            <zipfileset dir="." prefix="ipl${version-tag}" filemode="755" includes="scripts/**" />
            <zipfileset dir="." includes="docs/INSTALL-bin.txt" fullpath="ipl${version-tag}/INSTALL.txt" />
        </zip>

    </target>

</project>
